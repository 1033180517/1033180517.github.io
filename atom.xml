<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://1033180517.github.io</id>
    <title>Gridea</title>
    <updated>2020-07-08T00:15:55.037Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://1033180517.github.io"/>
    <link rel="self" href="https://1033180517.github.io/atom.xml"/>
    <subtitle>my blog</subtitle>
    <logo>https://1033180517.github.io/images/avatar.png</logo>
    <icon>https://1033180517.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[acm笔记（持续更新）]]></title>
        <id>https://1033180517.github.io/post/acm-bi-ji-chi-xu-geng-xin/</id>
        <link href="https://1033180517.github.io/post/acm-bi-ji-chi-xu-geng-xin/">
        </link>
        <updated>2020-07-08T00:09:58.000Z</updated>
        <content type="html"><![CDATA[<p>STL 自定义比较器<br>
struct cmp{<br>
bool operator()(const int &amp;a, const int &amp;b) const{<br>
if(a&gt;b)return 1;<br>
return 0;<br>
}<br>
};</p>
<p>set &lt;int, cmp&gt; s;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最大流]]></title>
        <id>https://1033180517.github.io/post/zui-da-liu/</id>
        <link href="https://1033180517.github.io/post/zui-da-liu/">
        </link>
        <updated>2020-07-07T16:43:49.000Z</updated>
        <content type="html"><![CDATA[<p>Ford-Fulkerson （dfs写法）</p>
<p>int n,m,s,t;<br>
int x,y,z;<br>
int vis[10002];</p>
<p>struct edge{<br>
int to,wei,re;<br>
};<br>
vector<edge>Map[10002];</p>
<p>void add_edge(int a,int b,int w){<br>
Map[a].push_back({b,w,Map[b].size()});<br>
Map[b].push_back({a,0,Map[a].size()-1});<br>
}</p>
<p>int dfs(int x,int num){<br>
if(x==t)return num;<br>
vis[x]=1;<br>
for(int i=0;i&lt;Map[x].size();i++){<br>
edge &amp;e=Map[x][i];<br>
if(!vis[e.to]&amp;&amp;e.wei&gt;0){<br>
int t=dfs(e.to,min(num,e.wei));<br>
if(t&gt;0){<br>
e.wei-=t;<br>
Map[e.to][e.re].wei+=t;<br>
return t;<br>
}<br>
}<br>
}<br>
return 0;<br>
}</p>
<p>int max_flow(int x){<br>
int flow=0;<br>
for(;😉{<br>
memset(vis,0,sizeof(vis));<br>
int f=dfs(x,inf);<br>
flow+=f;<br>
if(f==0)return flow;<br>
}<br>
}</p>
<p>int main(){<br>
ios::sync_with_stdio(0);<br>
cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;<br>
for(int i=0;i&lt;m;i++){<br>
cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>
add_edge(x,y,z);<br>
}<br>
cout&lt;&lt;max_flow(s)&lt;&lt;endl;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最短路径]]></title>
        <id>https://1033180517.github.io/post/zui-duan-lu-jing/</id>
        <link href="https://1033180517.github.io/post/zui-duan-lu-jing/">
        </link>
        <updated>2020-07-07T16:43:20.000Z</updated>
        <content type="html"><![CDATA[<p>1.Floyd O(n^3)</p>
<p>//暴力松弛，优化后，Map[i][j]表示结点i到结点j的最短距离</p>
<p>int n，Map[1005][1005];<br>
int main(){<br>
cin&gt;&gt;n;<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=1;j&lt;=n;j++){<br>
scanf(“%d”,&amp;Map[i][j]);<br>
}<br>
}<br>
for(int k=1;k&lt;=n;k++){<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=1;j&lt;=n;j++){<br>
if(Map[i][j]&gt;Map[i][k]+Map[k][j]){<br>
Map[i][j]=Map[i][k]+Map[k][j];<br>
}<br>
}<br>
}<br>
}<br>
}<br>
2.朴素Dijkstra  O(n^2)</p>
<p>//单源最短路，优化后，dis[i]表示结点s到结点i的最短距离</p>
<p>int n,m,s,s1,s2,s3,Map[10002][10002];<br>
int dis[10002],vis[10002];<br>
int main(){<br>
cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=1;j&lt;=n;j++){<br>
Map[i][j]=inf;<br>
}<br>
Map[i][i]=0;<br>
}<br>
while(m–){<br>
scanf(“%d%d%d”,&amp;s1,&amp;s2,&amp;s3);<br>
if(s3&lt;Map[s1][s2])Map[s1][s2]=s3;<br>
if(s3&lt;Map[s2][s1])Map[s2][s1]=s3;<br>
}<br>
for(int i=1;i&lt;=n;i++){<br>
dis[i]=Map[s][i];<br>
}<br>
memset(vis,0,sizeof(vis));<br>
vis[s]=1;<br>
for(int i=1;i&lt;=n;i++){<br>
int u=inf,p=-1;<br>
for(int j=1;j&lt;=n;j++){<br>
if(!vis[j]&amp;&amp;u&gt;dis[j]){<br>
u=dis[j];<br>
p=j;<br>
}<br>
}<br>
vis[p]=1;<br>
for(int j=1;j&lt;=n;j++){<br>
if(!vis[j]&amp;&amp;dis[j]&gt;dis[p]+Map[p][j]){<br>
dis[j]=dis[p]+Map[p][j];<br>
}<br>
}<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小生成树]]></title>
        <id>https://1033180517.github.io/post/zui-xiao-sheng-cheng-shu/</id>
        <link href="https://1033180517.github.io/post/zui-xiao-sheng-cheng-shu/">
        </link>
        <updated>2020-07-07T16:43:03.000Z</updated>
        <content type="html"><![CDATA[<p>1.Kruskal   O(ElogE)</p>
<p>//E为边数</p>
<p>//并查集，将边从小到大排序，另取一无边同结点图，遍历边，如果边的两个结点为不同连通分量，则连接边</p>
<p>int n,s,ans=0,num=0,fa[10002],m=0;<br>
struct edge{<br>
int x,y,w;<br>
}dd[100002];</p>
<p>int find(int xx){<br>
if(fa[xx]<mark>xx)return xx;<br>
return fa[xx]=find(fa[xx]);<br>
}<br>
bool cmp(edge a,edge b){<br>
if(a.w&lt;b.w)return 1;<br>
return 0;<br>
}<br>
int main(){<br>
cin&gt;&gt;n;<br>
for(int i=1;i&lt;=n;i++){<br>
fa[i]=i;<br>
for(int j=1;j&lt;=n;j++){<br>
scanf(“%d”,&amp;s);<br>
if(i&lt;j){<br>
num++;<br>
dd[num].x=i;<br>
dd[num].y=j;<br>
dd[num].w=s;<br>
}<br>
}<br>
}<br>
sort(dd+1,dd+num+1,cmp);<br>
for(int i=1;i&lt;=num;i++){<br>
if(find(dd[i].x)!=find(dd[i].y)){<br>
ans+=dd[i].w;<br>
fa[find(dd[i].x)]=dd[i].y;<br>
m++;<br>
if(m</mark>n-1)break;<br>
}<br>
}<br>
cout&lt;&lt;ans&lt;&lt;endl;<br>
}<br>
2.Prim   O(n^2)</p>
<p>//所有结点为白色，将结点1染蓝，将连接蓝-白结点的最短边入树并将白结点染蓝，重复n-1次</p>
<p>int n,s,vis[10002],num=0,b,w,ans=0;<br>
struct node{<br>
int x,y,w;<br>
bool operator&lt;(node a)const{<br>
return w&gt;a.w;<br>
}<br>
};<br>
vector<node>q[10002];<br>
priority_queue<node>p;<br>
int main(){<br>
cin&gt;&gt;n;<br>
memset(vis,0,sizeof(vis));<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=1;j&lt;=n;j++){<br>
scanf(“%d”,&amp;s);<br>
if(i==j)continue;<br>
q[i].push_back({i,j,s});<br>
q[j].push_back({j,i,s});<br>
}<br>
}<br>
vis[1]=1;<br>
for(int i=0;i&lt;q[1].size();i++){<br>
p.push(q[1][i]);<br>
}<br>
while(num&lt;n-1){<br>
b=p.top().y; w=p.top().w; p.pop();<br>
if(vis[b])continue;<br>
vis[b]=1;<br>
ans+=w;<br>
num++;<br>
for(int i=0;i&lt;q[b].size();i++){<br>
p.push(q[b][i]);<br>
}<br>
}<br>
cout&lt;&lt;ans&lt;&lt;endl;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树状数组]]></title>
        <id>https://1033180517.github.io/post/shu-zhuang-shu-zu/</id>
        <link href="https://1033180517.github.io/post/shu-zhuang-shu-zu/">
        </link>
        <updated>2020-07-07T16:42:26.000Z</updated>
        <content type="html"><![CDATA[<p>int data[500003];        //存单点数据<br>
int sub[500003];        //data的差分数组<br>
int tree[500003];        //维护sub<br>
int tree1[500003];<br>
int tree2[500003];        //维护 sub2<br>
int sub2[500002];        //表示sub[i]*i的前缀和</p>
<p>//表示x的二进制表示从右向左第一个1换成十进制为多少</p>
<p>inline int lowbit(int x){<br>
return x&amp;(-x);<br>
}<br>
单点修改+区间查询</p>
<p>//建树</p>
<p>void build(){<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=i;j&lt;=n;j+=lowbit(j)){<br>
tree[j]+=data[i];<br>
}<br>
}<br>
}</p>
<p>//单点更新</p>
<p>void add(int x,int d){<br>
while(x&lt;=n){<br>
tree[x]+=d;<br>
x+=lowbit(x);<br>
}<br>
}</p>
<p>//区间查询</p>
<p>inline int range_query(int l,int r){<br>
int ans1=0,ans2=0;<br>
for(int i=r;i&gt;0;i-=lowbit(i)){<br>
ans1+=tree[i];<br>
}<br>
for(int i=l-1;i&gt;0;i-=lowbit(i)){<br>
ans2+=tree[i];<br>
}<br>
return ans1-ans2;<br>
}<br>
区间修改+单点查询</p>
<p>//用差分数组建树</p>
<p>void build(){<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=i;j&lt;=n;j+=lowbit(j)){<br>
tree[j]+=sub[i];<br>
}<br>
}<br>
}</p>
<p>//区间修改</p>
<p>void range_add(int l,int r,int d){<br>
for(int i=l;i&lt;=n;i+=lowbit(i)){<br>
tree[i]+=d;<br>
}<br>
for(int i=r+1;i&lt;=n;i+=lowbit(i)){<br>
tree[i]-=d;<br>
}<br>
}</p>
<p>//单点查询</p>
<p>inline int query(int x){<br>
int ans=0;<br>
for(int i=x;i&gt;0;i-=lowbit(i)){<br>
ans+=tree[i];<br>
}<br>
return ans;<br>
}<br>
区间修改+区间查询</p>
<p>//建树</p>
<p>void build(){<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=i;j&lt;=n;j+=lowbit(j)){<br>
tree1[j]+=sub[i];<br>
}<br>
}<br>
for(int i=1;i&lt;=n;i++){<br>
for(int j=i;j&lt;=n;j+=lowbit(j)){<br>
tree2[j]+=sub[i]*i;<br>
}<br>
}<br>
}</p>
<p>//区间修改</p>
<p>void range_add(int l,int r,int d){<br>
for(int i=l;i&lt;=n;i+=lowbit(i)){<br>
tree1[i]+=d;<br>
}<br>
for(int i=r+1;i&lt;=n;i+=lowbit(i)){<br>
tree1[i]-=d;<br>
}<br>
for(int i=l;i&lt;=n;i+=lowbit(i)){<br>
tree2[i]+=d*l;<br>
}</p>
<pre><code>for(int i=r+1;i&lt;=n;i+=lowbit(i)){
    tree2[i]-=d*r-d;
}
</code></pre>
<p>}</p>
<p>//区间查询</p>
<p>int range_query(int l,int r){<br>
int ans1=0,ans2=0,s=0;</p>
<pre><code>for(int i=r;i&gt;0;i-=lowbit(i)){
    s+=tree1[i];
}
ans1+=s*(r+1);
s=0;
for(int i=r;i&gt;0;i-=lowbit(i)){
    s+=tree2[i];
}
ans1-=s;
s=0;
for(int i=l-1;i&gt;0;i-=lowbit(i)){
    s+=tree1[i];
}
ans2+=s*l;
s=0;
for(int i=l-1;i&gt;0;i-=lowbit(i)){
    s+=tree2[i];
}
ans2-=s;
return ans1-ans2;
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[KMP]]></title>
        <id>https://1033180517.github.io/post/kmp/</id>
        <link href="https://1033180517.github.io/post/kmp/">
        </link>
        <updated>2020-07-07T16:42:06.000Z</updated>
        <content type="html"><![CDATA[<p>//文本串和模式串<br>
string str,pat;</p>
<p>//next[i]表示模式串前i个字符组成的串其前缀后缀相通的最长长度<br>
//也是在i出匹配失败时该跳转的位置<br>
int next[10002];</p>
<p>//得到next数组<br>
void getnext(){<br>
int i=0,j=-1;<br>
next[0]=-1;<br>
while(i&lt;pat.size()){<br>
if(j==-1||pat[i]==pat[j]){<br>
next[++i]=++j;<br>
}<br>
else j=next[j];<br>
}<br>
}</p>
<p>//返回文本串中模式串出现的次数<br>
int kmp(){<br>
int i=0,j=0,len1=str.size(),len2=pat.size();<br>
int ans=0;<br>
while(i&lt;len1){<br>
if(j==-1||str[i]<mark>pat[j]){<br>
i++;<br>
j++;<br>
}<br>
else j=next[j];<br>
if(j</mark>len2)ans++;<br>
}<br>
return ans;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线段树]]></title>
        <id>https://1033180517.github.io/post/xian-duan-shu/</id>
        <link href="https://1033180517.github.io/post/xian-duan-shu/">
        </link>
        <updated>2020-07-07T16:41:22.000Z</updated>
        <content type="html"><![CDATA[<p>ll n,m;<br>
ll value[400002];<br>
ll data[200002];<br>
ll lazy[400002];</p>
<p>//首先建树<br>
void build(int o,int l,int r){<br>
if(l==r){<br>
value[o]=data[l];<br>
return ;<br>
}<br>
ll m=(l+r)/2;<br>
build(o<em>2,l,m);<br>
build(o</em>2+1,m+1,r);<br>
value[o]=max(value[o<em>2],value[o</em>2+1]);<br>
}<br>
单点更新+区间查询</p>
<p>//单点更新，将x的value改为d<br>
void update(int o,int l,int r,int x,int d){<br>
if(l==r){<br>
value[o]=d;<br>
return ;<br>
}<br>
int m=(l+r)/2;<br>
if(x&lt;=m)update(o<em>2,l,m,x,d);<br>
if(m+1&lt;=x)update(o</em>2+1,m+1,r,x,d);<br>
value[o]=max(value[o<em>2],value[o</em>2+1]);<br>
}</p>
<p>//查询区间[ql,qr]的最大值<br>
int query(int o,int l,int r,int ql,int qr){<br>
if(ql&lt;=l&amp;&amp;r&lt;=qr)return value[o];<br>
int m=(l+r)/2;<br>
int ans=0;<br>
if(ql&lt;=m){<br>
ans=max(ans,query(o<em>2,l,m,ql,qr));<br>
}<br>
if(qr&gt;=m+1){<br>
ans=max(ans,query(o</em>2+1,m+1,r,ql,qr));<br>
}<br>
return ans;<br>
}<br>
区间更新+区间和查询</p>
<p>//为区间[l,r]增加lazy标记d</p>
<p>void free(int o,int l,int r,int d){<br>
lazy[o]+=d;<br>
value[o]+=d*(r-l+1);<br>
}</p>
<p>//将lazy标记向下传递</p>
<p>void lazy_down(int o,int l,int r){<br>
if(!lazy[o])return ;<br>
int m=(l+r)/2;<br>
free(o<em>2,l,m,lazy[o]);<br>
free(o</em>2+1,m+1,r,lazy[o]);<br>
lazy[o]=0;<br>
}</p>
<p>//维护lazy的父节点</p>
<p>void push_up(int o){<br>
value[o]=value[o<em>2]+value[o</em>2+1];<br>
}</p>
<p>//区间更新，[ql,qr]每个数都增加d</p>
<p>void update(int o,int l,int r,int ql,int qr,int d){<br>
if(ql&lt;=l&amp;&amp;r&lt;=qr){<br>
free(o,l,r,d);<br>
return ;<br>
}<br>
lazy_down(o,l,r);<br>
int m=(l+r)/2;<br>
if(ql&lt;=m){<br>
update(o<em>2,l,m,ql,qr,d);<br>
}<br>
if(qr&gt;=m+1){<br>
update(o</em>2+1,m+1,r,ql,qr,d);<br>
}<br>
push_up(o);<br>
}</p>
<p>//区间查询,[ql,qr]之和</p>
<p>ll query(int o,int l,int r,int ql,int qr){<br>
if(ql&lt;=l&amp;&amp;r&lt;=qr){<br>
return value[o];<br>
}<br>
lazy_down(o,l,r);<br>
ll ans=0;<br>
int m=(l+r)/2;<br>
if(ql&lt;=m){<br>
ans+=query(o<em>2,l,m,ql,qr);<br>
}<br>
if(qr&gt;=m+1){<br>
ans+=query(o</em>2+1,m+1,r,ql,qr);<br>
}<br>
return ans;<br>
}<br>
例题</p>
<p>HDU – 1754</p>
<p>HDU – 1556</p>
<p>luogu – P3372</p>
<p>luogu – P3373 (算到自闭)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速幂]]></title>
        <id>https://1033180517.github.io/post/kuai-su-mi/</id>
        <link href="https://1033180517.github.io/post/kuai-su-mi/">
        </link>
        <updated>2020-07-07T16:40:26.000Z</updated>
        <content type="html"><![CDATA[<p>ll b,p,k,ans=1;<br>
ll x,y,z;</p>
<p>int main(){<br>
cin&gt;&gt;b&gt;&gt;p&gt;&gt;k;<br>
x=b;y=p;z=k;</p>
<pre><code>while(y&gt;1){
    if(y%2==0){
        x*=x; y/=2; x%=z;
    }
    else{
        ans*=x; ans%=z;
        x*=x; y/=2; x%=z;
    }
}
ans*=x; ans%=z;
cout&lt;&lt;ans&lt;&lt;endl;
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线性筛素数]]></title>
        <id>https://1033180517.github.io/post/xian-xing-shai-su-shu/</id>
        <link href="https://1033180517.github.io/post/xian-xing-shai-su-shu/">
        </link>
        <updated>2020-07-07T16:17:39.000Z</updated>
        <content type="html"><![CDATA[<p>const ll N = 10000050;<br>
ll prime[N] = {0};    //记录质数<br>
ll num_prime =0;     //表示质数数量<br>
int isNotPrime[N] = {1, 1};    //记录n是否为质数</p>
<p>int main(){<br>
for(ll i=2;i&lt;N;i++){<br>
if(!isNotPrime[i]){        // i为质数，则记录<br>
prime[num_prime++]=i;<br>
}<br>
for(ll j=0;j&lt;num_prime&amp;&amp;i<em>prime[j]&lt;N;j++){    // 质数</em>i为合数，记录<br>
isNotPrime[i * prime[j]] = 1;<br>
if(!(i%prime[j]))  //防止重复筛选<br>
break;<br>
}<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://1033180517.github.io/post/hello-gridea/</id>
        <link href="https://1033180517.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>